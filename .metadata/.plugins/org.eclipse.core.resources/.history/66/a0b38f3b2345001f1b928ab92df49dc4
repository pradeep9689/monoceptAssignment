package com.monocept.entity;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

public class Studentdb {
	private DataSource dataSource;

	public Studentdb(DataSource dataSource) {
		super();
		this.dataSource = dataSource;
	}

	public List<Student> getStudents() {

		List<Student> studentList = new ArrayList<Student>();
		try {
			Connection conn = dataSource.getConnection();
			Statement stmt = conn.createStatement();
			String sql = "select * from students";
			ResultSet rs = stmt.executeQuery(sql);
			while (rs.next()) {
				int id = rs.getInt("id");
				String name = rs.getString("name");
				String email = rs.getString("email");
				Student student = new Student(id, name, email);
				studentList.add(student);
			}

		} catch (SQLException e) {

			e.printStackTrace();
		}
		return studentList;

	}

	public boolean addStudent(Student student) {

		try {
			Connection conn = dataSource.getConnection();
			String sql = "insert into students(name,email) values(?,?)";
			PreparedStatement pmst = conn.prepareStatement(sql);
			pmst.setString(1, student.getName());
			pmst.setString(2, student.getEmail());

			int rs = pmst.executeUpdate();
			return rs == 1 ? true : false;

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}

	public Student getStudent(int id) throws SQLException {
		Student student = null;
		String sql = "SELECT * FROM students WHERE id=?";
		try (Connection conn = dataSource.getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql)) {
			pstmt.setInt(1, id);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {

				String name = rs.getString("name");
				String email = rs.getString("email");
				student = new Student(id,name, email);
			}
		}
		return student;
	}

	public void updateStudent(Student updatedStudent) {
		String sql = "UPDATE students SET name=?, email=? WHERE id=?";
		try 
		{
			Connection conn = dataSource.getConnection(); 
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, updatedStudent.getName());
			pstmt.setString(2, updatedStudent.getEmail());;
			pstmt.setInt(3, updatedStudent.getId());
			pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void deleteStudent(int studentId) {
		String sql = "DELETE FROM students WHERE id=?";
        try (Connection conn = dataSource.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, studentId);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
public ResultSet searchstudent(String student) throws SQLException {
	 List<Student> users = new ArrayList<>();

     try (Connection conn = dataSource.getConnection()) {
         boolean isId = false;
         int id = 0;
         try {
             id = Integer.parseInt(student);
             isId = true;
         } catch (NumberFormatException e) {
             // Not an integer, treat it as a name or email
         }

         String sql;
         PreparedStatement stmt;
         if (isId) {
             sql = "SELECT * FROM users WHERE id = ?";
             stmt = conn.prepareStatement(sql);
             stmt.setInt(1, id);
         } else {
             sql = "SELECT * FROM users WHERE name LIKE ? OR email LIKE ?";
             stmt = conn.prepareStatement(sql);
             stmt.setString(1, "%" + student + "%");
             stmt.setString(2, "%" + student + "%");
         }

         ResultSet rs = stmt.executeQuery();
         while (rs.next()) {
             Student students = new Student();
             user.setId(rs.getInt("id"));
             user.setName(rs.getString("name"));
             user.setEmail(rs.getString("email"));
             users.add(user);
         }

         rs.close();
         stmt.close();
     }

     return users;
 }
	}

	